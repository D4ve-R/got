#!/usr/bin/env python3
import sys
import os
import subprocess
import requests

# check env for openai api key, if not present check in $HOME/.config/got/credentials, if not present ask for it
if 'OPENAI_API_KEY' in os.environ:
    openai_api_key = os.environ['OPENAI_API_KEY']
else:
    try:
        with open(os.path.join(os.environ['HOME'], '.config', 'got', 'token'), 'r') as f:
            openai_api_key = f.read().strip()
    except FileNotFoundError:
        key = input("Please enter your OpenAI API key: ").strip()
        openai_api_key = key
        os.environ['OPENAI_API_KEY'] = key
        path = os.path.join(os.environ['HOME'], '.config', 'got')
        os.makedirs(path, exist_ok=True)
        with open(os.path.join(path, 'token'), 'w') as f:
            f.write(key)


def generate_commit_message(diff):
    messages = []
    prompt = f"Can you write a commit messages with maximum 72 characters describing the following output:\n\n{diff}"
    messages.append({"role": "user", "content": prompt})
    data = {
        "model": "gpt-3.5-turbo",
        "messages": messages,
        "temperature": 0.5,
    }
    response = requests.post(
        "https://api.openai.com/v1/chat/completions",
        headers={"Authorization": f"Bearer {openai_api_key}"},
        json=data,
    )

    if response.status_code != 200:
        print(response.text)
        sys.exit(1)

    response = response.json()
    return response['choices'][0]['message']['content']

def git_commit(*args):
    if args == ("commit",):
        diff = subprocess.check_output(["git", "diff", "--staged"]).decode("utf-8")
        commit_message = generate_commit_message(diff)
        commit_message = f'"{commit_message}"'
        subprocess.run(["git", "commit", "-m", commit_message])
    else:
        subprocess.run(["git"] + list(args))

if __name__ == "__main__":
    git_commit(*sys.argv[1:])
